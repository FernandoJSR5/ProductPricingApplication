/**
 * NOTE: This class is auto generated by OpenAPI Generator ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{package}};

import org.springframework.format.annotation.DateTimeFormat;
import com.commerce.domain.model.ErrorResponse;
import java.time.OffsetDateTime;
import com.commerce.domain.model.PriceResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "{{{currentDate}}}")
@Validated
@Tag(name = "{{tagName}}", description = "the prices API")
public interface {{classname}} {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /prices/applicable : Get applicable price for a product
     * Retrieves the applicable price for a product in a retail chain based on the provided application date.
     *
     * @param applicationDate The date and time when the price is applicable (e.g., &#39;2024-08-26T15:00:00&#39;). (required)
     * @param productId The ID of the product. (required)
     * @param brandId The ID of the brand. (required)
     * @return Applicable price found (status code 200)
     *         or No applicable price found for the provided parameters (status code 404)
     *         or Invalid input parameters (status code 400)
     */
    @Operation(
        operationId = "getApplicablePrice",
        summary = "Get applicable price for a product",
        description = "Retrieves the applicable price for a product in a retail chain based on the provided application date. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Applicable price found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "No applicable price found for the provided parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/prices/applicable",
        produces = { "application/json" }
    )
    default CompletableFuture<ResponseEntity<PriceResponse>> _getApplicablePrice(
        @NotNull @Parameter(name = "applicationDate", description = "The date and time when the price is applicable (e.g., '2024-08-26T15:00:00').", required = true, in = ParameterIn.QUERY)
        @Valid @RequestParam(value = "applicationDate", required = true)
        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
        OffsetDateTime applicationDate,

        @NotNull @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.QUERY)
        @Valid @RequestParam(value = "productId", required = true) Long productId,

        @NotNull @Parameter(name = "brandId", description = "The ID of the brand.", required = true, in = ParameterIn.QUERY)
        @Valid @RequestParam(value = "brandId", required = true) Long brandId
    ) {
        return getApplicablePrice(applicationDate, productId, brandId);
    }

    // Override this method
    default CompletableFuture<ResponseEntity<PriceResponse>> getApplicablePrice(OffsetDateTime applicationDate, Long productId, Long brandId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : { \"productId\" : 0, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 1.4658129805029452, \"brandId\" : 5, \"currency\" : \"currency\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"priceList\" : 6 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return CompletableFuture.completedFuture(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }
}
